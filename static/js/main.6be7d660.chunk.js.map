{"version":3,"sources":["transitionsCSS/fade.module.css","Components/Form/Form.module.css","Components/ContactList/ContactList.module.css","Components/Alert/Alert.module.css","Components/FilterName/FilterName.module.css","App.module.css","Components/Logo/Logo.module.css","transitionsCSS/appearSlide.module.css","redux/contactsRedux/contactsAction.js","redux/contactsRedux/contactsRedux.js","redux/store.js","Components/Alert/Alert.jsx","Components/Form/Form.jsx","Components/ContactList/getFilterContacts.jsx","Components/ContactList/ContactList.jsx","Components/FilterName/FilterName.jsx","Components/Logo/Logo.jsx","App.jsx","index.js"],"names":["module","exports","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","changeFilter","itemsRedux","createReducer","contactsAction","_","filter","contact","filterRedux","combineReducers","items","persistConfig","key","storage","whitelist","store","configureStore","reducer","contacts","persistReducer","contactsRedux","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","persiststore","persistStore","Alert","message","className","style","alert","Form","state","alertRepetition","nameInputId","numberInputId","notify","field","toast","warn","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","handleSubmit","e","preventDefault","contactsProps","props","console","log","find","contactName","setState","reset","onSubmitForm","handleChange","currentTarget","value","onResetAlert","this","onSubmit","container","htmlFor","item","type","onChange","CSSTransition","in","length","timeout","classNames","fade","unmountOnExit","onEntered","Component","connect","dispatch","getFilterContacts","normalizedFilter","toLowerCase","includes","ContactList","onClickDelete","TransitionGroup","component","list","map","onClick","target","Logo","mixStyle","bind","App","appear","appearSlide","ReactDOM","render","StrictMode","loading","persistor","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,MAAQ,oBAAoB,YAAc,0BAA0B,KAAO,mBAAmB,WAAa,2B,mBCA7HD,EAAOC,QAAU,CAAC,UAAY,wBAAwB,KAAO,qB,mBCA7DD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,KAAO,0BAA0B,QAAU,+B,mBCA9FD,EAAOC,QAAU,CAAC,MAAQ,uB,mBCA1BD,EAAOC,QAAU,CAAC,UAAY,gC,mBCA9BD,EAAOC,QAAU,CAAC,MAAQ,mBAAmB,OAAS,sB,mBCAtDD,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,OAAS,4BAA4B,aAAe,oC,yLCkBvD,GAAEC,WAhBEC,YAAa,wBAAwB,YAAuB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAC/D,MAAO,CACLC,QAAS,CAEPC,GAAIC,eACJJ,KAAMA,EACNC,OAAQA,OAUeI,cALPN,YAAa,2BAKSO,aAHvBP,YAAa,2BCZ5BQ,EAAaC,YAAc,IAAD,mBAC7BC,EAAeX,YAAa,SAACY,EAAD,GAAqB,IAAfR,EAAc,EAAdA,QAEjC,MAAM,GAAN,mBAAWQ,GAAX,CAAcR,OAHc,cAM7BO,EAAeJ,eAAgB,SAACK,EAAD,OAAMR,EAAN,EAAMA,QAAN,OAC9BQ,EAAEC,QAAO,SAAAC,GAAO,OAAIA,EAAQT,KAAOD,QAPP,IAU1BW,EAAcL,YAAc,GAAD,eAC9BC,EAAeH,cAAe,SAACI,EAAD,YAAMR,YAGxBY,cAAgB,CAC7BC,MAAOR,EACPI,OAAQE,ICLJG,EAAgB,CACpBC,IAAK,eACLC,YACAC,UAAW,CAAC,UAGRC,EAAQC,YAAe,CAC3BC,QAAS,CAAEC,SAAUC,YAAeR,EAAeS,IACnDC,WAAY,SAAAC,GAAoB,OAC9BA,EAAqB,CACnBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,QAE3DC,OAAOC,MACZC,UAAUC,IAMG,GAAEnB,QAAOoB,aAHHC,YAAarB,I,wDCjBnBsB,EAVD,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACZ,mCACE,mBAAGC,UAAWC,IAAMC,MAApB,SAA4BH,O,0DCO1BI,E,4MAYJC,MAAQ,CAAEhD,KAAM,GAAIC,OAAQ,GAAIgD,gBAAiB,I,EAEjDC,YAAc9C,e,EACd+C,cAAgB/C,e,EAEhBgD,OAAS,SAAAC,GAAK,OACZC,IAAMC,KAAN,mCAAmBF,EAAnB,oHAAkD,CAChDG,SAAU,WACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,K,EAGdC,aAAe,SAAAC,GACbA,EAAEC,iBADgB,MAEO,EAAKlB,MAAtBhD,EAFU,EAEVA,KAAMC,EAFI,EAEJA,OACRkE,EAAgB,EAAKC,MAAM7C,SAQjC,GAPA8C,QAAQC,IAAIH,GACPnE,GACH,EAAKoD,OAAO,QAETnD,GACH,EAAKmD,OAAO,UAEVe,EAAcI,MAAK,SAAAC,GAAW,OAAIA,EAAYxE,OAASA,KAIzD,OAFA,EAAKyE,SAAS,CAAExB,gBAAgB,GAAD,OAAKjD,EAAL,mCAC/B,EAAK0E,QAGH1E,GAAQC,GACV,EAAKmE,MAAMO,aAAa,EAAK3B,OAG/B,EAAK0B,S,EAGPE,aAAe,SAAAX,GAAM,IAAD,EACMA,EAAEY,cAAlB7E,EADU,EACVA,KAAM8E,EADI,EACJA,MACd,EAAKL,SAAL,eAAiBzE,EAAO8E,K,EAG1BJ,MAAQ,WACN,EAAKD,SAAS,CAAEzE,KAAM,GAAIC,OAAQ,M,EAGpC8E,aAAe,WACb,EAAKN,SAAS,CAAExB,gBAAiB,M,4CAGnC,WAAU,IAAD,SACmC+B,KAAKhC,MAAvChD,EADD,EACCA,KAAMC,EADP,EACOA,OAAQgD,EADf,EACeA,gBACtB,OACE,qCACE,uBAAMgC,SAAUD,KAAKhB,aAAcpB,UAAWC,IAAMqC,UAApD,UACE,wBAAOC,QAASH,KAAK9B,YAAaN,UAAWC,IAAMuC,KAAnD,iBAEE,uBACEC,KAAK,OACLrF,KAAK,OACL8E,MAAO9E,EACPsF,SAAUN,KAAKJ,aACfzE,GAAI6E,KAAK9B,iBAGb,wBAAOiC,QAASH,KAAK7B,cAAeP,UAAWC,IAAMuC,KAArD,mBAEE,uBACEC,KAAK,MACLrF,KAAK,SACL8E,MAAO7E,EACPqF,SAAUN,KAAKJ,aACfzE,GAAI6E,KAAK7B,mBAGb,cAAC,IAAD,IACA,wBAAQkC,KAAK,SAAb,4BAEF,cAACE,EAAA,EAAD,CAEEC,GAAIvC,EAAgBwC,OAAS,EAC7BC,QAAS,IACTC,WAAYC,IACZC,eAAa,EACbC,UAAW,kBAAM,EAAKf,gBANxB,SAQE,cAAC,EAAD,CAAOpC,QAASM,a,GArGP8C,aAwHJC,eAZS,SAAC,GACvB,MAAO,CACLzE,SAFiD,EAA1BA,SAAYR,UAMZ,SAAAkF,GACzB,MAAO,CACLtB,aAAc,SAAA/D,GAAO,OAAIqF,EAASxF,EAAeX,WAAWc,QAIjDoF,CAA6CjD,G,yBC9H7CmD,EARW,SAAC3E,EAAUZ,GACnC,IAAMwF,EAAmBxF,EAAOyF,cAEhC,OAAO7E,EAASZ,QAAO,SAAAC,GAAO,OAC5BA,EAAQZ,KAAKoG,cAAcC,SAASF,OCOlCG,E,4JAWJ,WAAU,IAAD,EAC6BtB,KAAKZ,MAAjC7C,EADD,EACCA,SAAUgF,EADX,EACWA,cAClB,OAEE,aADA,CACCC,EAAA,EAAD,CAAiBC,UAAU,KAAK7D,UAAWC,IAAM6D,KAAjD,SACGnF,GACCA,EAASoF,KAAI,SAAA/F,GAAO,OAClB,cAAC2E,EAAA,EAAD,CAAgCG,QAAS,IAAKC,WAAYC,IAA1D,SACE,qBAAqBhD,UAAWC,IAAMuC,KAAtC,UACE,oBAAGxC,UAAWC,IAAMjC,QAApB,UACE,iCAAOA,EAAQZ,KAAf,OACA,+BAAOY,EAAQX,YAEjB,wBAAQoF,KAAK,SAASuB,QAAS,kBAAML,EAAc3F,EAAQT,KAA3D,sBALOS,EAAQT,KADCS,EAAQT,a,GAlBd4F,aAgDXC,eAbS,SAAC,GAAqC,IAAD,IAAlCzE,SAAYR,EAAsB,EAAtBA,MAAOJ,EAAe,EAAfA,OAE5C,MAAO,CACLY,SAAU2E,EAAkBnF,EAAOJ,OAIZ,SAAAsF,GACzB,MAAO,CACLM,cAAe,SAAApG,GAAE,OAAI8F,EAASxF,EAAeJ,cAAcF,QAIhD6F,CAA6CM,G,iBC/B7CN,eARS,SAAC,GAAD,MAA+B,CACrDlB,MADsB,EAAGvD,SAAYZ,WAIZ,SAAAsF,GAAQ,MAAK,CACtCX,SAAU,SAAArB,GAAC,OAAIgC,EAASxF,EAAeH,aAAa2D,EAAE4C,OAAO/B,YAGhDkB,EApBI,SAAC,GAAD,IAAGlB,EAAH,EAAGA,MAAOQ,EAAV,EAAUA,SAAV,OACjB,wBAAO1C,UAAWC,IAAMqC,UAAxB,kCAEE,uBAAOG,KAAK,OAAOP,MAAOA,EAAOQ,SAAUA,U,uDCNhCwB,GAFF,kBAAM,oBAAIlE,UAAWC,KAAMiE,KAArB,wB,oBCYfC,GAAWpB,KAAWqB,KAAKnE,KAEzBoE,G,4JAWJ,WAAU,IACA1F,EAAayD,KAAKZ,MAAlB7C,SACR,OACE,qCACE,cAACgE,EAAA,EAAD,CAEEC,IAAI,EACJ0B,QAAQ,EACRxB,QAAS,IACTC,WAAYwB,KACZtB,eAAa,EANf,SAQE,cAAC,GAAD,MAEF,cAAC,EAAD,IAGA,cAACN,EAAA,EAAD,CAEEC,GAAIjE,EAASkE,OAAS,EACtBC,QAAS,IACTC,WAAYC,IACZC,eAAa,EALf,SAOE,cAAC,EAAD,MAEF,oBAAIjD,UAAWmE,GAAS,QAAS,UAAjC,sBACA,cAAC,EAAD,W,GAtCUhB,aAkDHC,gBANS,SAAC,GACvB,MAAO,CACLzE,SAFiD,EAA1BA,SAAYR,SAMxBiF,CAAyBiB,I,gCCzDxCG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUlG,MAAOA,EAAMA,MAAvB,SACE,cAAC,KAAD,UACE,cAAC,KAAD,CAAamG,QAAS,KAAMC,UAAWpG,EAAMoB,aAA7C,SACE,cAAC,GAAD,YAKRiF,SAASC,eAAe,W","file":"static/js/main.6be7d660.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"fade_enter__veNvx\",\"enterActive\":\"fade_enterActive__10iU1\",\"exit\":\"fade_exit__f2WC1\",\"exitActive\":\"fade_exitActive__osyOr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Form_container__31w3k\",\"item\":\"Form_item__3phD-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1PGZT\",\"item\":\"ContactList_item__1a43p\",\"contact\":\"ContactList_contact__1Xz7o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alert\":\"Alert_alert__1zoWd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FilterName_container__3OP5w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"App_title__1Unyx\",\"center\":\"App_center__2YYdi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Logo_Logo__3Ffm9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"appearSlide_appear__DUCHz\",\"appearActive\":\"appearSlide_appearActive__3FGEL\"};","import { createAction } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst addContact = createAction('contacts/add_contact', ({ name, number }) => {\n  return {\n    payload: {\n      /**создаём новый контакт и присвоим ему ID  */\n      id: uuidv4(),\n      name: name,\n      number: number,\n    },\n  };\n});\n\nconst deleteContact = createAction('contacts/delete_contact');\n\nconst changeFilter = createAction('contacts/change_filter');\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { addContact, deleteContact, changeFilter };\n","import { createReducer } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport contactsAction from './contactsAction';\n\nconst itemsRedux = createReducer([], {\n  [contactsAction.addContact]: (_, { payload }) => {\n    /**добавляем новый контакт в в состояние контактов */\n    return [..._, payload];\n  },\n\n  [contactsAction.deleteContact]: (_, { payload }) =>\n    _.filter(contact => contact.id !== payload),\n});\n\nconst filterRedux = createReducer('', {\n  [contactsAction.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items: itemsRedux,\n  filter: filterRedux,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\nimport contactsRedux from './contactsRedux/contactsRedux';\n\nconst persistConfig = {\n  key: 'listContacts',\n  storage,\n  whitelist: ['items'],\n};\n\nconst store = configureStore({\n  reducer: { contacts: persistReducer(persistConfig, contactsRedux) },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }).concat(logger),\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persiststore = persistStore(store);\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { store, persiststore };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport style from './Alert.module.css';\n/* eslint react/prop-types: 1 */\n\nconst Alert = ({ message }) => (\n  <>\n    <p className={style.alert}>{message}</p>\n  </>\n);\n\nAlert.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Alert;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Alert from 'Components/Alert/Alert';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { connect } from 'react-redux';\nimport 'react-toastify/dist/ReactToastify.css';\nimport style from './Form.module.css';\nimport contactsAction from 'redux/contactsRedux/contactsAction';\nimport fade from 'transitionsCSS/fade.module.css';\nimport { CSSTransition } from 'react-transition-group';\n\n/* eslint react/prop-types: 1 */\n\nclass Form extends Component {\n  static propTypes = {\n    onSubmitForm: PropTypes.func,\n    contacts: PropTypes.arrayOf(\n      PropTypes.exact({\n        id: PropTypes.string,\n        name: PropTypes.string,\n        number: PropTypes.string,\n      }),\n    ),\n  };\n\n  state = { name: '', number: '', alertRepetition: '' };\n\n  nameInputId = uuidv4();\n  numberInputId = uuidv4();\n\n  notify = field =>\n    toast.warn(`поле ${field} не должно бить пустым`, {\n      position: 'top-left',\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n    });\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { name, number } = this.state;\n    const contactsProps = this.props.contacts;\n    console.log(contactsProps);\n    if (!name) {\n      this.notify('Name');\n    }\n    if (!number) {\n      this.notify('Number');\n    }\n    if (contactsProps.find(contactName => contactName.name === name)) {\n      /**проверка на повторение имён */\n      this.setState({ alertRepetition: `${name} is already in contacts!` });\n      this.reset();\n      return;\n    }\n    if (name && number) {\n      this.props.onSubmitForm(this.state);\n    }\n\n    this.reset();\n  };\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  onResetAlert = () => {\n    this.setState({ alertRepetition: '' });\n  };\n\n  render() {\n    const { name, number, alertRepetition } = this.state;\n    return (\n      <>\n        <form onSubmit={this.handleSubmit} className={style.container}>\n          <label htmlFor={this.nameInputId} className={style.item}>\n            Name\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={this.handleChange}\n              id={this.nameInputId}\n            />\n          </label>\n          <label htmlFor={this.numberInputId} className={style.item}>\n            Number\n            <input\n              type=\"tel\"\n              name=\"number\"\n              value={number}\n              onChange={this.handleChange}\n              id={this.numberInputId}\n            />\n          </label>\n          <ToastContainer />\n          <button type=\"submit\">Add contact</button>\n        </form>\n        <CSSTransition\n          //TODO Анимация появления-исчезания предупреждения о совпадении имён по условию\n          in={alertRepetition.length > 0}\n          timeout={3000}\n          classNames={fade}\n          unmountOnExit\n          onEntered={() => this.onResetAlert()}\n        >\n          <Alert message={alertRepetition} />\n        </CSSTransition>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({ contacts: { items } }) => {\n  return {\n    contacts: items,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSubmitForm: contact => dispatch(contactsAction.addContact(contact)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","const getFilterContacts = (contacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n};\n\nexport default getFilterContacts;\n","import contactsAction from 'redux/contactsRedux/contactsAction';\nimport { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport style from './ContactList.module.css';\nimport fade from 'transitionsCSS/fade.module.css';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport getFilterContacts from './getFilterContacts';\n\n/* eslint react/prop-types: 1 */\n\nclass ContactList extends Component {\n  static propTypes = {\n    contacts: PropTypes.arrayOf(\n      PropTypes.exact({\n        id: PropTypes.string,\n        name: PropTypes.string,\n        number: PropTypes.string,\n      }),\n    ).isRequired,\n    onClickDelete: PropTypes.func.isRequired,\n  };\n  render() {\n    const { contacts, onClickDelete } = this.props;\n    return (\n      // TODO Добавление анимации на добавление-удаление списка контактов\n      <TransitionGroup component=\"ul\" className={style.list}>\n        {contacts &&\n          contacts.map(contact => (\n            <CSSTransition key={contact.id} timeout={250} classNames={fade}>\n              <li key={contact.id} className={style.item}>\n                <p className={style.contact}>\n                  <span>{contact.name}:</span>\n                  <span>{contact.number}</span>\n                </p>\n                <button type=\"button\" onClick={() => onClickDelete(contact.id)}>\n                  Delete\n                </button>\n              </li>\n            </CSSTransition>\n          ))}\n      </TransitionGroup>\n    );\n  }\n}\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => {\n  /** фильтруем, показываем только те что совпадают*/\n  return {\n    contacts: getFilterContacts(items, filter),\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onClickDelete: id => dispatch(contactsAction.deleteContact(id)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from 'react';\nimport style from './FilterName.module.css';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactsAction from 'redux/contactsRedux/contactsAction';\n\n/* eslint react/prop-types: 1 */\n\nconst FilterName = ({ value, onChange }) => (\n  <label className={style.container}>\n    Find contacts by name\n    <input type=\"text\" value={value} onChange={onChange} />\n  </label>\n);\n\nFilterName.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nconst mapStateToProps = ({ contacts: { filter } }) => ({\n  value: filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(contactsAction.changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterName);\n","import React from 'react';\nimport style from './Logo.module.css';\n\nconst Logo = () => <h2 className={style.Logo}>Phonebook</h2>;\n\nexport default Logo;\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Form from './Components/Form/Form';\nimport ContactList from './Components/ContactList/ContactList';\nimport FilterName from './Components/FilterName/FilterName';\nimport style from './App.module.css';\nimport classNames from 'classnames/bind';\nimport Logo from 'Components/Logo/Logo';\nimport appearSlide from './transitionsCSS/appearSlide.module.css'; /**модули CSS указывать до CSSTransition */\nimport fade from './transitionsCSS/fade.module.css';\nimport { CSSTransition } from 'react-transition-group';\n\n/* eslint react/prop-types: 1 */\n\nlet mixStyle = classNames.bind(style);\n\nclass App extends Component {\n  static propTypes = {\n    contacts: PropTypes.arrayOf(\n      PropTypes.exact({\n        id: PropTypes.string,\n        name: PropTypes.string,\n        number: PropTypes.string,\n      }),\n    ),\n  };\n\n  render() {\n    const { contacts } = this.props;\n    return (\n      <>\n        <CSSTransition\n          //TODO добавляем анимацию появления Logo при загрузке страницы\n          in={true}\n          appear={true}\n          timeout={500}\n          classNames={appearSlide}\n          unmountOnExit\n        >\n          <Logo />\n        </CSSTransition>\n        <Form\n        // ? функция добавления контакта реализована через Redux\n        ></Form>\n        <CSSTransition\n          //TODO Анимация появления-исчезания поля для фильтра контактов по условию\n          in={contacts.length > 1}\n          timeout={500}\n          classNames={fade}\n          unmountOnExit\n        >\n          <FilterName />\n        </CSSTransition>\n        <h2 className={mixStyle('title', 'center')}>Contacts</h2>\n        <ContactList />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({ contacts: { items } }) => {\n  return {\n    contacts: items,\n  };\n};\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from 'redux/store.js';\nimport App from './App.jsx';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <BrowserRouter>\n        <PersistGate loading={null} persistor={store.persiststore}>\n          <App />\n        </PersistGate>\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}